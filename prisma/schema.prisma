// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  productId          Int           @id @default(autoincrement())
  productName        String
  productImages      String[]
  productRating      Int?
  productPrice       Float
  productOrderAmount String?
  productDescription String
  productDetails     String
  Category           Category[]
  userId             Int
  owner              User          @relation(fields: [userId], references: [userId])
  OrderRecord        OrderRecord[]
  reviewed           Review[]
  CartRecord         CartRecord[]
}

model Cart {
  cartId     Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [userId])
  userId     Int          @unique
  updateTime DateTime     @default(now())
  cartRecord CartRecord[]
}

model CartRecord {
  ProductId     Int
  recordProduct Product @relation(fields: [ProductId], references: [productId])
  Cart          Cart    @relation(fields: [CartId], references: [cartId])
  CartId        Int
  quantity      Int

  @@id([CartId, ProductId])
}

model Category {
  categoryId          Int       @id @default(autoincrement())
  categoryImage       String?
  categoryTitle       String
  categoryDescription String
  product             Product[]
}

model User {
  userId            Int        @id @default(autoincrement())
  userEmail         String?    @unique
  password          String
  userName          String
  userAvatarUrl     String?
  userBackgroundUrl String?
  userReviews       Review[]
  Product           Product[]
  Location          Location[]
  Cart              Cart?
  Order             Order[]
}

model Location {
  locationId Int     @id @default(autoincrement())
  userId     Int
  user       User    @relation(fields: [userId], references: [userId])
  address    String
  postcode   String?
  nation     String?
}

model Review {
  reviewId          Int      @id @default(autoincrement())
  reviewTitle       String
  reviewDescription String
  reviewDate        DateTime @default(now())
  reviewRating      Int
  reviewHelpfulness Int?
  reviewer          User     @relation(fields: [reviewerId], references: [userId])
  reviewerId        Int
  product           Product  @relation(fields: [productId], references: [productId])
  productId         Int
}

model Order {
  orderId           Int           @id @default(autoincrement())
  orderDate         DateTime      @default(now())
  orderDeliveryDate DateTime?
  orderPaymentDate  DateTime?
  paid              Boolean       @default(false)
  orderStatus       OrderStatus   @default(PREPARED)
  UserId            Int
  owner             User          @relation(fields: [UserId], references: [userId])
  orderRecord       OrderRecord[]
}

model OrderRecord {
  ProductId     Int
  recordProduct Product @relation(fields: [ProductId], references: [productId])
  Order         Order   @relation(fields: [OrderId], references: [orderId])
  OrderId       Int
  quantity      Int     @default(1)

  @@id([OrderId, ProductId])
}

enum OrderStatus {
  PREPARED
  SHIPPING
  DONE
}
